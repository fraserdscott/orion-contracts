/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RegisterSystem,
  RegisterSystemInterface,
} from "../RegisterSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "arguments",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        internalType: "enum RegisterType",
        name: "registerType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "arguments",
        type: "bytes",
      },
    ],
    name: "requirement",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610bee380380610bee83398101604081905261002f9161010b565b600280546001600160a01b0319163317905581816001600160a01b0381161561005857806100ba565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ba9190610145565b600080546001600160a01b039283166001600160a01b031991821617909155600180549490921693169290921790915550610169915050565b6001600160a01b038116811461010857600080fd5b50565b6000806040838503121561011e57600080fd5b8251610129816100f3565b602084015190925061013a816100f3565b809150509250929050565b60006020828403121561015757600080fd5b8151610162816100f3565b9392505050565b610a76806101786000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780638b246a5b1461007a5780638da5cb5b1461008e578063f6cd7a01146100a9575b600080fd5b61006461005f36600461072e565b6100bc565b60405161007191906107c3565b60405180910390f35b61006461008836600461072e565b50606090565b6002546040516001600160a01b039091168152602001610071565b6100646100b7366004610836565b6105d7565b6060600080600080858060200190518101906100d89190610887565b600154939750919550935091506001600160a01b0316331461014d5760405162461bcd60e51b815260206004820152602360248201527f73797374656d2063616e206f6e6c792062652063616c6c65642076696120576f6044820152621c9b1960ea1b60648201526084015b60405180910390fd5b6000836001811115610161576101616108da565b148061017e5750600183600181111561017c5761017c6108da565b145b6101b95760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207479706560a01b6044820152606401610144565b806000036101f65760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b6044820152606401610144565b6001600160a01b03821661023e5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b6044820152606401610144565b600080846001811115610253576102536108da565b146102935760005461028e906001600160a01b03167f017c816a964927a00e050edd780dcf113ca2756dfa9e9fda94a05c140d9317b0610610565b6102a0565b6000546001600160a01b03165b905060006001600160a01b038416604051636667bd4760e11b8152600481018290529091506001600160a01b0383169063cccf7a8e90602401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a91906108f0565b156103675760405162461bcd60e51b815260206004820152601960248201527f656e7469747920616c72656164792072656769737465726564000000000000006044820152606401610144565b604051637defd0f560e11b8152600481018490526000906001600160a01b0384169063fbdfa1ea90602401600060405180830381865afa1580156103af573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103d79190810190610919565b90508051600014806104875750805160011480156104875750866001600160a01b031661041b82600081518110610410576104106109bf565b602002602001015190565b6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c91906109d5565b6001600160a01b0316145b6104e65760405162461bcd60e51b815260206004820152602a60248201527f696420616c7265616479207265676973746572656420616e642063616c6c6572604482015269103737ba1037bbb732b960b11b6064820152608401610144565b805160010361056a57826001600160a01b0316634cc8221582600081518110610511576105116109bf565b60200260200101516040518263ffffffff1660e01b815260040161053791815260200190565b600060405180830381600087803b15801561055157600080fd5b505af1158015610565573d6000803e3d6000fd5b505050505b604051631ab06ee560e01b815260048101839052602481018590526001600160a01b03841690631ab06ee590604401600060405180830381600087803b1580156105b357600080fd5b505af11580156105c7573d6000803e3d6000fd5b5050505050505050505050919050565b6060610607858585856040516020016105f394939291906109f2565b6040516020818303038152906040526100bc565b95945050505050565b604051637defd0f560e11b81526004810182905260009081906001600160a01b0385169063fbdfa1ea90602401600060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106829190810190610919565b905080516000036106c95760405162461bcd60e51b81526020600482015260116024820152701a59081b9bdd081c9959da5cdd195c9959607a1b6044820152606401610144565b6106df81600081518110610410576104106109bf565b949350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610726576107266106e7565b604052919050565b6000602080838503121561074157600080fd5b823567ffffffffffffffff8082111561075957600080fd5b818501915085601f83011261076d57600080fd5b81358181111561077f5761077f6106e7565b610791601f8201601f191685016106fd565b915080825286848285010111156107a757600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b818110156107f0578581018301518582016040015282016107d4565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461082657600080fd5b50565b6002811061082657600080fd5b6000806000806080858703121561084c57600080fd5b843561085781610811565b9350602085013561086781610829565b9250604085013561087781610811565b9396929550929360600135925050565b6000806000806080858703121561089d57600080fd5b84516108a881610811565b60208601519094506108b981610829565b60408601519093506108ca81610811565b6060959095015193969295505050565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561090257600080fd5b8151801515811461091257600080fd5b9392505050565b6000602080838503121561092c57600080fd5b825167ffffffffffffffff8082111561094457600080fd5b818501915085601f83011261095857600080fd5b81518181111561096a5761096a6106e7565b8060051b915061097b8483016106fd565b818152918301840191848101908884111561099557600080fd5b938501935b838510156109b35784518252938501939085019061099a565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156109e757600080fd5b815161091281610811565b6001600160a01b038581168252608082019060028610610a2257634e487b7160e01b600052602160045260246000fd5b8560208401528085166040840152508260608301529594505050505056fea2646970667358221220a45588c3de06d5b28669c3a9f0c81b10ec2a03827e515a9a7fbacfb812a9d60d64736f6c63430008100033";

type RegisterSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegisterSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegisterSystem__factory extends ContractFactory {
  constructor(...args: RegisterSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RegisterSystem";
  }

  deploy(
    _world: string,
    _components: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RegisterSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<RegisterSystem>;
  }
  getDeployTransaction(
    _world: string,
    _components: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  attach(address: string): RegisterSystem {
    return super.attach(address) as RegisterSystem;
  }
  connect(signer: Signer): RegisterSystem__factory {
    return super.connect(signer) as RegisterSystem__factory;
  }
  static readonly contractName: "RegisterSystem";
  public readonly contractName: "RegisterSystem";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegisterSystemInterface {
    return new utils.Interface(_abi) as RegisterSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegisterSystem {
    return new Contract(address, _abi, signerOrProvider) as RegisterSystem;
  }
}
